package com.ge.current.em.rules;

import java.lang.Double;
import java.lang.Math;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import java.util.Date
import java.util.HashMap;

rule "Too cold threshold"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAvgMap: measuresAvgMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForTooColdThreshold($measuresAvgMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.TOO_COLD_THRESHOLD);
$alarmObject.setAlertType(RulesUtil.TOO_COLD_THRESHOLD);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_PERFORMANCE);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_INFO, "Alarm triggered.");
end

function boolean detectFaultForTooColdThreshold(Object measuresObject, Object parametersObject, Object alarmObject) {

    boolean faultDetected = false;

    if(measuresObject == null || parametersObject == null || alarmObject == null) {
        return faultDetected;
    }

    String comfortThresholdKeyName = TagConstants.Parameters.COMFORT_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_THRESHOLD);
    String durationThresholdKeyName = TagConstants.Parameters.DURATION.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_THRESHOLD);
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_THRESHOLD);

    AlarmObject alarm = (AlarmObject) alarmObject;
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    List<String> requiredTags = Arrays.asList(TagConstants.Measures.ZONE_AIR_TEMP_SENSOR.getMeasureName(), comfortThresholdKeyName, durationThresholdKeyName, severityKeyName);
        if(!measures.isEmpty() && !parameters.isEmpty()) {
            List<String> tagsToBeChecked = new ArrayList<>();
            tagsToBeChecked.addAll(measures.get(0).keySet());
            tagsToBeChecked.addAll(parameters.keySet());
            if(!RulesUtil.areTagsValid(RulesUtil.TOO_COLD_THRESHOLD, tagsToBeChecked, requiredTags)) {
               GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_WARN, "Tags are not valid.");
               return faultDetected;
            }
        } else {
            GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_WARN, "One or more of these is empty: measures, tags, or parameters");
            return faultDetected;
       }

    Double comfortThreshold = (Double) parameters.get(comfortThresholdKeyName);
    Double durationThreshold = (Double) parameters.get(durationThresholdKeyName);

	/* detect fault */
    Map<String, Object> qualifyingFields = (Map<String, Object>) getConditionMetObjectForTooColdThreshold(measuresObject, comfortThreshold, durationThreshold);
    faultDetected = (boolean) qualifyingFields.get(RulesBaseFact.CONDITION_MET_FIELDNAME);

    if(faultDetected) {
        Double actualDuration = (Double) qualifyingFields.get(TagConstants.Parameters.DURATION.getParameterName());
        alarm.setSeverity((Double) parameters.get(severityKeyName));
        alarm.setDuration(actualDuration);
        alarm.setTimeOfAlert(qualifyingFields.get(AlarmObject.START_ALERT_FIELDNAME).toString());
        alarm.setFrequency(AlarmObject.FREQUENCY_HOURLY);
        alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
        alarmObject = alarm;
    }
    return faultDetected;
}

function Object getConditionMetObjectForTooColdThreshold(Object measuresObject, Double comfortThreshold, Double durationThreshold) {

   Double duration = 0.0;
   String startAlert = null;
   Map<String, Object> result = new HashMap<>();
   result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, false);

   List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
       for(Map<String, Object> currentMeasure : measures) {
           if(currentMeasure.get(TagConstants.Measures.ZONE_AIR_TEMP_SENSOR.getMeasureName()) != null &&
               currentMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()) != null ) {
               Double currentZoneAirTempSensor = (Double) currentMeasure.get(TagConstants.Measures.ZONE_AIR_TEMP_SENSOR.getMeasureName());
               GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_INFO, "Checking if current measure: "
                            + currentZoneAirTempSensor + " is < comfortThreshold: " + comfortThreshold);
               if(currentZoneAirTempSensor < comfortThreshold) {
                   duration += 15.0;
                   GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_INFO, "Checking if current duration: "
                                            +  duration + " is >= durationThreshold: " + durationThreshold);
                   if(duration >= durationThreshold) {
                       if(result.get(AlarmObject.START_ALERT_FIELDNAME) == null) {
                            startAlert = currentMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()).toString();
                            GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_INFO, "Start time of alert: " + startAlert);
                           result.put(AlarmObject.START_ALERT_FIELDNAME, startAlert);
                       }
                       result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, true);
                       result.put(TagConstants.Parameters.DURATION.getParameterName(), duration);
                   }
               }
           }
       }
   GeneralUtil.log(RulesUtil.TOO_COLD_THRESHOLD, GeneralUtil.LEVEL_INFO, "Result: " + result);
   return (Object) result;
}
