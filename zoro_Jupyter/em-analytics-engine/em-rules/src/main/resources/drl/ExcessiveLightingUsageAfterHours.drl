package com.ge.current.em.rules;

import java.lang.Double;
import java.lang.Math;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import java.util.HashMap

rule "Excessive Lighting Usage After Hours"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAggrMap: measuresAggrMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForExcessiveLightingUsageAfterHours($measuresAggrMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS);
$alarmObject.setAlertType(RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_COST);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
GeneralUtil.log(RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS, GeneralUtil.LEVEL_INFO, "Alarm triggered.");
end

function boolean detectFaultForExcessiveLightingUsageAfterHours(Object measuresMapObject, Object parametersObject, Object alarmObject ) {
    boolean faultDetected = false;
    if(measuresMapObject == null || parametersObject == null) {
        return faultDetected;
    }

    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresMapObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    String indoorLightingStatusOnRuntimeTagName = TagConstants.Tags.INDOOR_LIGHTING_STATUS_ON_RUNTIME.getTagName();
    String excessiveLightingUsageAfterHoursRuleName = RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS;

   List<String> requiredTags = Arrays.asList(indoorLightingStatusOnRuntimeTagName, TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(excessiveLightingUsageAfterHoursRuleName));
     if(!measures.isEmpty() && !parameters.isEmpty()){
          List<String> tagsToBeChecked = new ArrayList<>();
          tagsToBeChecked.addAll(measures.get(0).keySet());
          tagsToBeChecked.addAll(parameters.keySet());
          if(!RulesUtil.areTagsValid(excessiveLightingUsageAfterHoursRuleName, tagsToBeChecked, requiredTags)) {
              GeneralUtil.log(excessiveLightingUsageAfterHoursRuleName, GeneralUtil.LEVEL_INFO, "Tags are not valid.");
              return faultDetected;
           }
      } else {
          GeneralUtil.log(excessiveLightingUsageAfterHoursRuleName, GeneralUtil.LEVEL_WARN, "One or more of these is empty: measures, tags, or parameters");
          return faultDetected;
      }

    Object userThr = parameters.get(TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(excessiveLightingUsageAfterHoursRuleName));
    if(userThr == null){
         GeneralUtil.log(excessiveLightingUsageAfterHoursRuleName, GeneralUtil.LEVEL_INFO, "userThreshold is null");
         return faultDetected;
    }

    Double userThreshold = (Double) parameters.get(TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(excessiveLightingUsageAfterHoursRuleName));
    Map<String, Object> results = (Map<String, Object>) getResultLightingUsageAfterHours(measuresMapObject, (Object) indoorLightingStatusOnRuntimeTagName, (Object) userThreshold);
    faultDetected = (boolean) results.get("detectFault");

    if(!faultDetected) {
        return faultDetected;
    }
    String startAlertTime = (String) results.get("startAlert");
    Double duration  = (Double) results.get("duration");
    AlarmObject alarm = (AlarmObject) alarmObject;
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS);
    if (parameters.get(severityKeyName) != null) {
        alarm.setSeverity((Double) parameters.get(severityKeyName));
    }
	alarm.setDuration(duration);
	alarm.setTimeOfAlert(startAlertTime);
	alarm.setFrequency(AlarmObject.FREQUENCY_DAILY);
	alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
	alarmObject = alarm;
    return faultDetected;
}

function Object getResultLightingUsageAfterHours(Object measuresMapObject, Object indoorLightingStatusOnRuntimeTagName, Object threshold){

    Map<String, Object> result = new HashMap<>();
    String startAlert = null;
    boolean detectFault = false;
    double timeThreshold = (double) threshold;
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresMapObject;
    String indoorLightingStatusOnRuntime = (String) indoorLightingStatusOnRuntimeTagName;
    Double sumIndoorLightingStatusOnRuntime = 0.0;
    Double duration = 0.0;
    Double currentValue = 0.0;

    for (Map<String, Object> currentMapMeasure: measures){
        if (currentMapMeasure.get(indoorLightingStatusOnRuntime) != null){
            currentValue = (Double) currentMapMeasure.get(indoorLightingStatusOnRuntime)/60;
            sumIndoorLightingStatusOnRuntime += currentValue;
            if (sumIndoorLightingStatusOnRuntime > timeThreshold){
                detectFault = true;
                duration += currentValue;
                if(startAlert != null) {
                	startAlert = currentMapMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()).toString();
                }            
             }
        }
    }

    result.put("detectFault", detectFault);
    result.put("startAlert", startAlert);
    result.put("duration", duration);
    GeneralUtil.log(RulesUtil.EXCESSIVE_LIGHTING_USAGE_AFTER_HOURS, GeneralUtil.LEVEL_INFO, "totalIndoorLightingStatusOnRuntime: " + sumIndoorLightingStatusOnRuntime + " userThreshold " + timeThreshold + "Start Alert time" + startAlert);
    return (Object) result;

}

