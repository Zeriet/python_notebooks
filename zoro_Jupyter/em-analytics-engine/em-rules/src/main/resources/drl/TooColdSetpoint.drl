package com.ge.current.em.rules;

import java.lang.Double;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import com.ge.current.em.util.TagConstants
import java.util.HashMap

rule "Too Cold - Setpoint"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAvgMap: measuresAvgMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForTooColdSetpoint($measuresAvgMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.TOO_COLD_SETPOINT);
$alarmObject.setAlertType(RulesUtil.TOO_COLD_SETPOINT);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_PERFORMANCE);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_INFO, "Alarm triggered.");
end

function boolean detectFaultForTooColdSetpoint(Object measuresObject, Object parametersObject, Object alarmObject) {
    boolean faultDetected = false;

    if(measuresObject == null || parametersObject == null || alarmObject == null) {
            return faultDetected;
    }
    AlarmObject alarm = (AlarmObject) alarmObject;

    String setpointOffsetKeyName = TagConstants.Parameters.SETPOINT_OFFSET.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_SETPOINT);
    String durationThresholdKeyName = TagConstants.Parameters.DURATION.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_SETPOINT);
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.TOO_COLD_SETPOINT);

    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    List<String> requiredTags = Arrays.asList(TagConstants.Measures.ZONE_AIR_TEMP_SENSOR.getMeasureName(),
       /* we use heating here */
       TagConstants.Tags.ZONE_AIR_TEMP_EFFECTIVE_SP_HEATING.getTagName(), setpointOffsetKeyName, durationThresholdKeyName, severityKeyName);
       if(!measures.isEmpty() && !parameters.isEmpty()){
            List<String> tagsToBeChecked = new ArrayList<>();
            tagsToBeChecked.addAll(measures.get(0).keySet());
            tagsToBeChecked.addAll(parameters.keySet());
            if(!RulesUtil.areTagsValid(RulesUtil.TOO_COLD_SETPOINT, tagsToBeChecked, requiredTags)) {
                GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_INFO, "Tags are not valid.");
                return faultDetected;
            }
        } else {
            GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_WARN, "measures and/or parameters is empty");
            return faultDetected;
       }

    Double setpointOffset = (Double) parameters.get(setpointOffsetKeyName);
    Double durationThreshold = (Double) parameters.get(durationThresholdKeyName);

    /* detect fault */
    Map<String, Object> qualifyingFields = (Map<String, Object>) getConditionMetObjectForTooColdSetpoint(measuresObject, setpointOffset, durationThreshold);
    faultDetected = (boolean) qualifyingFields.get(RulesBaseFact.CONDITION_MET_FIELDNAME);
    if(faultDetected) {
        Double actualDuration = (Double) qualifyingFields.get(TagConstants.Parameters.DURATION.getParameterName());
        alarm.setSeverity((Double) parameters.get(severityKeyName));
        alarm.setDuration(actualDuration);
        alarm.setTimeOfAlert(qualifyingFields.get(AlarmObject.START_ALERT_FIELDNAME).toString());
        alarm.setFrequency(AlarmObject.FREQUENCY_HOURLY);
        alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
        alarmObject = alarm;
    }
    return faultDetected;
}

function Object getConditionMetObjectForTooColdSetpoint(Object measuresObject, Double setpointOffset, Double durationThreshold) {
    Double duration = 0.0;
    String startAlert = null;
    Map<String, Object> result = new HashMap<>();
    result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, false);
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
    for(Map<String, Object> currentMeasure : measures) {
        String zoneAirTempSensorName = TagConstants.Measures.ZONE_AIR_TEMP_SENSOR.getMeasureName();
        String zoneAirTempHeatingSpName = TagConstants.Tags.ZONE_AIR_TEMP_EFFECTIVE_SP_HEATING.getTagName();
        String eventTsName = TagConstants.Measures.EVENT_TS.getMeasureName();
        if (currentMeasure.get(zoneAirTempSensorName) != null
            && currentMeasure.get(zoneAirTempHeatingSpName) != null
            && currentMeasure.get(eventTsName) != null) {
            Double currentZoneAirTempSensor = (Double) currentMeasure.get(zoneAirTempSensorName);
            Double currentZoneAirEffectiveSp = (Double) currentMeasure.get(zoneAirTempHeatingSpName);
            GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_INFO, "Comparing if currentZoneAirTempSensor: " + currentZoneAirTempSensor +
                            " is < currentHeatingSp: " + currentZoneAirEffectiveSp + " - setpointOffset: " + setpointOffset);
            if (currentZoneAirTempSensor < currentZoneAirEffectiveSp - setpointOffset) {
                GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_INFO, "Checking if current duration: "
                         +  duration + " is >= durationThreshold: " + durationThreshold);
                duration += 15.0;
                if (duration >= durationThreshold) {
                    if(result.get(AlarmObject.START_ALERT_FIELDNAME) == null) {
                        startAlert = currentMeasure.get(eventTsName).toString();
                        GeneralUtil.log(RulesUtil.TOO_COLD_SETPOINT, GeneralUtil.LEVEL_INFO, "Start time of alert: " + startAlert);
                        result.put(AlarmObject.START_ALERT_FIELDNAME, startAlert);
                    }
                result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, true);
                result.put(TagConstants.Parameters.DURATION.getParameterName(), duration);
                }
            }
        }
    }
    return (Object) result;
}
