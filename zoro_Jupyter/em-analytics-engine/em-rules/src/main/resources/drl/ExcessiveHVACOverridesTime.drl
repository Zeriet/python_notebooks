package com.ge.current.em.rules;

import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import java.util.HashMap

rule "Excessive HVAC Overrides - time"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAggrMap: measuresAggrMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForExcessiveHVACOverridesTime($measuresAggrMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME);
$alarmObject.setAlertType(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_VIOLATION);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
GeneralUtil.log(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME, GeneralUtil.LEVEL_INFO, "Alarm triggered.");
end


function boolean detectFaultForExcessiveHVACOverridesTime(Object measuresMapObject, Object parametersObject, Object alarmObject) {
    boolean faultDetected = false;
    if(measuresMapObject == null || parametersObject == null) {
        return faultDetected;
    }

    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresMapObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    String hvacStateOverrideTrueRuntimeTagName = TagConstants.Tags.HVAC_STATE_OVERRIDE_TRUE_RUNTIME.getTagName();
    String excessiveHVACUsageAfterHoursRuleName = RulesUtil.EXCESSIVE_HVAC_USAGE_AFTER_HOURS;

   List<String> requiredTags = Arrays.asList(hvacStateOverrideTrueRuntimeTagName, TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME));
     if(!measures.isEmpty() && !parameters.isEmpty()){
          List<String> tagsToBeChecked = new ArrayList<>();
          tagsToBeChecked.addAll(measures.get(0).keySet());
          tagsToBeChecked.addAll(parameters.keySet());
          if(!RulesUtil.areTagsValid(excessiveHVACUsageAfterHoursRuleName, tagsToBeChecked, requiredTags)) {
              GeneralUtil.log(excessiveHVACUsageAfterHoursRuleName, GeneralUtil.LEVEL_INFO, "Tags are not valid.");
              return faultDetected;
           }
      } else {
          GeneralUtil.log(excessiveHVACUsageAfterHoursRuleName, GeneralUtil.LEVEL_WARN, "One or more of these is empty: measures, tags, or parameters");
          return faultDetected;
      }

    Object userThr = parameters.get(TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME));

    if(userThr == null){
      GeneralUtil.log(excessiveHVACUsageAfterHoursRuleName, GeneralUtil.LEVEL_INFO, "userThreshold is null");
       return faultDetected;
    }

    Double userThreshold = (Double) parameters.get(TagConstants.Parameters.USER_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME));

    Map<String, Object> results = (Map<String, Object>) getResultHvacStateOverrideTime(measuresMapObject, (Object) userThreshold);
    faultDetected = (boolean) results.get("detectFault");

    if(!faultDetected) {
        return faultDetected;
    }
    String startAlertTime = (String) results.get("startAlert");
    Double duration  = (Double) results.get("duration");
    AlarmObject alarm = (AlarmObject) alarmObject;
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME);
    if (parameters.get(severityKeyName) != null) {
        alarm.setSeverity((Double) parameters.get(severityKeyName));
    }    alarm.setDuration(duration);
    alarm.setTimeOfAlert(startAlertTime);
    alarm.setFrequency(AlarmObject.FREQUENCY_DAILY);
    alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
    alarmObject = alarm;

    return faultDetected;
}


function Object getResultHvacStateOverrideTime(Object measuresMapObject, Object threshold){

    Map<String, Object> result = new HashMap<>();
    String startAlert = null;
    boolean detectFault = false;
    double timeThreshold = (double) threshold;
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresMapObject;
    String hvacStateOverrideTrueRuntimeTagName = TagConstants.Tags.HVAC_STATE_OVERRIDE_TRUE_RUNTIME.getTagName();
    Double sumHvacStateOverrideTime = 0.0;

    for (Map<String, Object> currentMapMeasure: measures){
        if (currentMapMeasure.get(hvacStateOverrideTrueRuntimeTagName) != null){
            sumHvacStateOverrideTime += (Double) currentMapMeasure.get(hvacStateOverrideTrueRuntimeTagName)/60;
            if (sumHvacStateOverrideTime > timeThreshold){
                detectFault = true;
                if(startAlert == null){
                  startAlert = currentMapMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()).toString();
                 }
             }
        }
    }
    result.put("detectFault", detectFault);
    result.put("startAlert", startAlert);
    result.put("duration", sumHvacStateOverrideTime);
    GeneralUtil.log(RulesUtil.EXCESSIVE_HVAC_OVERRIDES_TIME, GeneralUtil.LEVEL_INFO, "sumHvacStateOverrideTime: " + sumHvacStateOverrideTime + " userThreshold " + timeThreshold + "Start Alert time" + startAlert);

    return (Object) result;

}
