package com.ge.current.em.rules;

import java.lang.Double;
import java.lang.Math;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import com.ge.current.em.util.TagConstants
import java.util.Date
import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

rule "Supply Temperature Too High"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAvgMap: measuresAvgMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForSupplyTemperatureTooHigh($measuresAvgMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
$alarmObject.setAlertType(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_PERFORMANCE);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
end

function boolean detectFaultForSupplyTemperatureTooHigh(Object measuresObject, Object parametersObject, Object alarmObject) {
    final Logger LOG = LoggerFactory.getLogger(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    boolean faultDetected = false;
    if(measuresObject == null || parametersObject == null || alarmObject == null) {
        return faultDetected;
    }
    AlarmObject alarm = (AlarmObject) alarmObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;

    String temperatureThresholdKeyName = TagConstants.Parameters.TEMPERATURE_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    String tempHoldDurationKeyName = TagConstants.Parameters.TEMP_HOLD_DURATION.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);

    if(!areTagsValidForSupplyTemperatureTooHigh((Object)measures.get(0), parametersObject)) {
        return faultDetected;
    }

    Double temperatureThreshold = (Double) parameters.get(temperatureThresholdKeyName);
    Double tempHoldDuration = (Double) parameters.get(tempHoldDurationKeyName);

    /* detect fault */
    Map<String, Object> qualifyingFields = (Map<String, Object>) getConditionMetObjectForSupplyTemperatureTooHigh(measuresObject,
                temperatureThreshold, tempHoldDuration);
    faultDetected = (boolean) qualifyingFields.get(RulesBaseFact.CONDITION_MET_FIELDNAME);
    if(faultDetected) {
        Double actualDuration = (Double) qualifyingFields.get(TagConstants.Parameters.DURATION.getParameterName());
        alarm.setSeverity((Double) parameters.get(severityKeyName));
        alarm.setDuration(actualDuration);
        alarm.setTimeOfAlert(qualifyingFields.get(AlarmObject.START_ALERT_FIELDNAME).toString());
        alarm.setFrequency(AlarmObject.FREQUENCY_HOURLY);
        alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
        alarmObject = alarm;
        LOG.info("Fault detected! Triggering alarm...");
    }
    return faultDetected;
}

function boolean areTagsValidForSupplyTemperatureTooHigh(Object firstMapOfMeasures, Object parametersObject) {
    final Logger LOG = LoggerFactory.getLogger(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    Map<String, Object> measures = (Map<String, Object>) firstMapOfMeasures;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    String temperatureThresholdKeyName = TagConstants.Parameters.TEMPERATURE_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    String tempHoldDurationKeyName = TagConstants.Parameters.TEMP_HOLD_DURATION.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);

    List<String> requiredTags = Arrays.asList(TagConstants.Tags.DISCHARGE_AIR_TEMP_SENSOR.getTagName(), temperatureThresholdKeyName, tempHoldDurationKeyName, severityKeyName);
    if(!measures.isEmpty() && !parameters.isEmpty()) {
        List<String> tagsToBeChecked = new ArrayList<>();
        tagsToBeChecked.addAll(measures.keySet());
        tagsToBeChecked.addAll(parameters.keySet());
        if(!RulesUtil.areTagsValid(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH, tagsToBeChecked, requiredTags)) {
           LOG.info("Tags are not valid.");
           return false;
        }
    } else {
        LOG.warn("Measures and parameters are empty.");
        return false;
      }
    return true;
}

function Object getConditionMetObjectForSupplyTemperatureTooHigh(Object measuresObject, Double temperatureThreshold, Double tempHoldDuration) {
    final Logger LOG = LoggerFactory.getLogger(RulesUtil.SUPPLY_TEMPERATURE_TOO_HIGH);
    Double duration = 0.0;
    String startAlert = null;
    Map<String, Object> result = new HashMap<>();
    result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, false);
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
    for(Map<String, Object> currentMeasure : measures) {
    	if(currentMeasure.get(TagConstants.Tags.DISCHARGE_AIR_TEMP_SENSOR.getTagName()) != null && currentMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()) != null) {
            Double currentDischargeAirTempSensor = (Double) currentMeasure.get(TagConstants.Tags.DISCHARGE_AIR_TEMP_SENSOR.getTagName());
            LOG.info("Checking if current dischargeAirTempSensor: "
                                    + currentDischargeAirTempSensor + " is > temperatureThreshold: " + temperatureThreshold);
	        if(currentDischargeAirTempSensor > temperatureThreshold) {
	            duration += 15.0;
	            LOG.info("Checking if current duration: " + duration + " is >= tempHoldDuration: " + tempHoldDuration);
	            if(duration >= tempHoldDuration) {
	                if(result.get(AlarmObject.START_ALERT_FIELDNAME) == null) {
                        startAlert = currentMeasure.get(TagConstants.Measures.EVENT_TS.getMeasureName()).toString();
                        result.put(AlarmObject.START_ALERT_FIELDNAME, startAlert);
                    }
                    result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, true);
                    result.put(TagConstants.Parameters.DURATION.getParameterName(), duration);
	            }
	        }
        }
    }
    LOG.info("Result: " + result);
    return (Object) result;
}
