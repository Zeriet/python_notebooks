package com.ge.current.em.rules;

import java.lang.Double;
import java.lang.Math;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList
import java.util.List;
import java.util.Map;

import com.ge.current.em.entities.analytics.*;
import com.ge.current.em.util.TagConstants;
import com.ge.current.em.util.GeneralUtil;
import com.ge.current.em.util.RulesUtil
import java.util.HashMap;

rule "Proving Fan"
dialect "java"
no-loop true
when
$data : RulesBaseFact($assetId: assetId,
$tagsMap: tagsMap,
$segmentId: segmentId,
$enterpriseId: enterpriseId,
$siteId: siteId,
$measuresAvgMap: measuresAvgMap,
$alarmObject: alarmObject,
$conditionMet: conditionMet,
$parameters: parameters,
detectFaultForProvingFan($measuresAvgMap, $tagsMap, $parameters, $alarmObject))
then
$alarmObject.setAssetId($assetId);
$alarmObject.setAlertName(RulesUtil.PROVING_FAN);
$alarmObject.setAlertType(RulesUtil.PROVING_FAN);
$alarmObject.setCategory(RulesUtil.CATEGORY);
$alarmObject.setFaultCategory(RulesUtil.FAULT_CATEGORY_EQUIPMENT);
$data.setAlarmObject($alarmObject);
$data.setConditionMet(true);
GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_INFO, "Alarm triggered.");
retract($data);
end

function boolean detectFaultForProvingFan(Object measuresObject, Object tagsMapObject, Object parametersObject, Object alarmObject) {
    boolean faultDetected = false;

    if(measuresObject == null || tagsMapObject == null || parametersObject == null || alarmObject == null) {
        GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_WARN, "null objects.");
        return faultDetected;
    }

    String airFanCmdTagName = TagConstants.Tags.DISCHARGE_AIR_FAN_CMD.getTagName();
    String currentThresholdTag = TagConstants.Parameters.CURRENT_THRESHOLD.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.PROVING_FAN);
    String severityKeyName = TagConstants.Parameters.SEVERITY.getParameterName() + RulesUtil.getFDSINumber(RulesUtil.PROVING_FAN);

     AlarmObject alarm = (AlarmObject) alarmObject;

    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;
    List<Map<String, Object>> tags = (List<Map<String, Object>>) tagsMapObject;
    Map<String, Object> parameters = (Map<String, Object>) parametersObject;

    List<String> requiredTags = Arrays.asList(TagConstants.Tags.DISCHARGE_AIR_FAN_CURRENT_SENSOR.getTagName(), currentThresholdTag, severityKeyName, airFanCmdTagName);
    if(!measures.isEmpty() && !tags.isEmpty()) {
        List<String> tagsToBeChecked = new ArrayList<>();
        tagsToBeChecked.addAll(measures.get(0).keySet());
        tagsToBeChecked.addAll(tags.get(0).keySet());
        tagsToBeChecked.addAll(parameters.keySet());
        GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_INFO, "Tags to be checked: " + tagsToBeChecked);
        if(!RulesUtil.areTagsValid(RulesUtil.PROVING_FAN, tagsToBeChecked, requiredTags)) {
           GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_INFO, "Tags are not valid.");
           return faultDetected;
        }
    } else {
        GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_WARN, "One or more of these is empty: measures, tags, or parameters.");
        return faultDetected;
    }

    /* detect fault here */
    Double threshold = (Double) parameters.get(currentThresholdTag);
    Map<String, Object> qualifyingFields = (Map<String, Object>) getConditionMetObjectForProvingFan(measuresObject, tagsMapObject, threshold);
    faultDetected = (boolean) qualifyingFields.get(RulesBaseFact.CONDITION_MET_FIELDNAME);
    if(faultDetected) {
        Double actualDuration = (Double) qualifyingFields.get(TagConstants.Parameters.DURATION.getParameterName());
        alarm.setSeverity((Double) parameters.get(severityKeyName));
        alarm.setDuration(actualDuration);
        if(qualifyingFields.get(AlarmObject.START_ALERT_FIELDNAME) != null) {
            alarm.setTimeOfAlert(qualifyingFields.get(AlarmObject.START_ALERT_FIELDNAME).toString());
        }
        alarm.setFrequency(AlarmObject.FREQUENCY_15MINUTE);
        alarm.setQueryTable(AlarmObject.QUERY_TABLE_BY_MINUTE);
        alarmObject = alarm;

    } else {
        GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_WARN, "Did not meet qualification.");
    }
    return faultDetected;
}

function Object getConditionMetObjectForProvingFan(Object measuresObject, Object tagsMapObject, Double currentThreshold) {
    Map<String, Object> result = new HashMap<>();
    result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, false);

    Double duration = 0.0;

    List<Map<String, Object>> tags = (List<Map<String, Object>>) tagsMapObject;
    List<Map<String, Object>> measures = (List<Map<String, Object>>) measuresObject;

    String currentSensorValueName = TagConstants.Tags.DISCHARGE_AIR_FAN_CURRENT_SENSOR.getTagName();
    String eventTsName = TagConstants.Measures.EVENT_TS.getMeasureName();

    String airFanCmdTagName  = TagConstants.Tags.DISCHARGE_AIR_FAN_CMD.getTagName();
    for(int i = 0; i < tags.size() && i < measures.size(); i++) {
        if(tags.get(i).get(airFanCmdTagName) != null) {
            if(measures.get(i).get(currentSensorValueName) != null &&
                tags.get(i).get(airFanCmdTagName) != null) {
                Double currentSensorValue = (Double) measures.get(i).get(currentSensorValueName);
                String currentStatus = tags.get(i).get(airFanCmdTagName).toString().toLowerCase();
                GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_INFO, "checking currentStatus: " + currentStatus);
                if(currentStatus.equals("on") || currentStatus.equals("true")) {
                    GeneralUtil.log(RulesUtil.PROVING_FAN, GeneralUtil.LEVEL_INFO,
                    "Checking if currentSensorValue: " + currentSensorValue + " is < currentThreshold: " + currentThreshold);
                    if(currentSensorValue < currentThreshold) {
                        duration += 15;
                        if (tags.get(i).get(eventTsName) != null) {
                            String startAlert = tags.get(i).get(eventTsName).toString();
                            result.put(AlarmObject.START_ALERT_FIELDNAME, startAlert);
                        }
                        result.put(TagConstants.Parameters.DURATION.getParameterName(), duration);
                        result.put(RulesBaseFact.CONDITION_MET_FIELDNAME, true);
                    }
                }
            }
        }
    }
    return (Object) result;
}
